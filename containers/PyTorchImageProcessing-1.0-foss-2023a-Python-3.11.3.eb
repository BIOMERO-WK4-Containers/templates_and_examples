easyblock = 'PythonBundle'

name = 'PyTorchImageProcessing'
version = '1.0'
versionsuffix = '-Python-%(pyver)s'

homepage = 'https://pytorch.org'
description = """
Container-ready PyTorch image processing environment with scikit-image and tifffile.
Includes Docker and Singularity generation capabilities.
"""

toolchain = {'name': 'foss', 'version': '2023a'}

dependencies = [
    ('Python', '3.11.3'),
    ('PyTorch', '2.1.2', versionsuffix),
    ('SciPy-bundle', '2023.07', versionsuffix),
    ('Pillow', '10.0.0', versionsuffix),
    ('imageio', '2.31.1', versionsuffix),
]

use_pip = True

exts_list = [
    ('scikit-image', '0.22.0', {
        'checksums': ['018d734df1d2da2719087d15f679d19285fce97cd37695103deadfaef2873236'],
    }),
    ('tifffile', '2023.9.26', {
        'checksums': ['7a3539b2d11c72dc3fdf5c849ce1c6bfe7bb94b28d3b7e1bc42e4f88b0c3e1e91'],
    }),
]

# Container generation configuration
postinstallcmds = [
    # Create container templates directory
    'mkdir -p %(installdir)s/container_templates',
    
    # Create requirements.txt from installed packages
    'cat > %(installdir)s/container_templates/requirements.txt << EOF\n'
    'torch==2.1.2\n'
    'torchvision\n'
    'scikit-image==0.22.0\n'
    'tifffile==2023.9.26\n'
    'numpy\n'
    'scipy\n'
    'pillow\n'
    'imageio\n'
    'EOF\n',
    
    # Create flexible Dockerfile template
    'cat > %(installdir)s/container_templates/Dockerfile.template << EOF\n'
    'FROM python:3.11-slim\n'
    'LABEL maintainer="EasyBuild Generated"\n'
    'LABEL version="%(version)s"\n'
    'RUN apt-get update && apt-get install -y \\\\\n'
    '    build-essential \\\\\n'
    '    git \\\\\n'
    '    && rm -rf /var/lib/apt/lists/*\n'
    'WORKDIR /app\n'
    'COPY requirements.txt .\n'
    'RUN pip install --no-cache-dir --upgrade pip && \\\\\n'
    '    pip install --no-cache-dir -r requirements.txt\n'
    'COPY {{SCRIPT_NAME}} .\n'
    'RUN chmod +x {{SCRIPT_NAME}}\n'
    'ENTRYPOINT ["python", "{{SCRIPT_NAME}}"]\n'
    'EOF\n',
    
    # Create Singularity definition template
    'cat > %(installdir)s/container_templates/singularity.def.template << EOF\n'
    'Bootstrap: docker\n'
    'From: python:3.11-slim\n'
    '%%files\n'
    '    requirements.txt /app/requirements.txt\n'
    '    {{SCRIPT_NAME}} /app/{{SCRIPT_NAME}}\n'
    '%%post\n'
    '    apt-get update && apt-get install -y \\\\\n'
    '        build-essential \\\\\n'
    '        git \\\\\n'
    '        && rm -rf /var/lib/apt/lists/*\n'
    '    cd /app\n'
    '    pip install --no-cache-dir --upgrade pip\n'
    '    pip install --no-cache-dir -r requirements.txt\n'
    '%%environment\n'
    '    export LC_ALL=C\n'
    '    export PATH="/app:$PATH"\n'
    '%%runscript\n'
    '    cd /app\n'
    '    exec python {{SCRIPT_NAME}} "$@"\n'
    '%%labels\n'
    '    Author EasyBuild\n'
    '    Version %(version)s\n'
    '    Description PyTorch image processing container\n'
    '%%help\n'
    '    This container provides a PyTorch environment for image processing.\n'
    '    Usage: singularity run {{CONTAINER_NAME}}.sif [arguments]\n'
    'EOF\n',
    
    # Create universal container builder script
    'cat > %(installdir)s/container_templates/build_containers.py << EOF\n'
    '#!/usr/bin/env python3\n'
    'import os\n'
    'import sys\n'
    'import shutil\n'
    'import subprocess\n'
    'import argparse\n'
    'from pathlib import Path\n'
    '\n'
    'def main():\n'
    '    parser = argparse.ArgumentParser(description="Build Docker and Singularity containers")\n'
    '    parser.add_argument("script", help="Python script to containerize")\n'
    '    parser.add_argument("--docker-only", action="store_true", help="Build only Docker image")\n'
    '    parser.add_argument("--singularity-only", action="store_true", help="Build only Singularity image")\n'
    '    parser.add_argument("--tag", help="Container tag/name (default: script basename)")\n'
    '    args = parser.parse_args()\n'
    '    \n'
    '    script_path = Path(args.script)\n'
    '    if not script_path.exists():\n'
    '        print(f"Error: Script {script_path} not found")\n'
    '        sys.exit(1)\n'
    '    \n'
    '    script_name = script_path.name\n'
    '    base_name = args.tag or script_path.stem\n'
    '    \n'
    '    # Create build directory\n'
    '    build_dir = Path(f"build_{base_name}")\n'
    '    build_dir.mkdir(exist_ok=True)\n'
    '    os.chdir(build_dir)\n'
    '    \n'
    '    # Copy files\n'
    '    template_dir = Path("%(installdir)s/container_templates")\n'
    '    shutil.copy(script_path, script_name)\n'
    '    shutil.copy(template_dir / "requirements.txt", ".")\n'
    '    \n'
    '    # Generate Dockerfile\n'
    '    with open(template_dir / "Dockerfile.template") as f:\n'
    '        dockerfile_content = f.read().replace("{{SCRIPT_NAME}}", script_name)\n'
    '    with open("Dockerfile", "w") as f:\n'
    '        f.write(dockerfile_content)\n'
    '    \n'
    '    # Generate Singularity definition\n'
    '    with open(template_dir / "singularity.def.template") as f:\n'
    '        singularity_content = f.read().replace("{{SCRIPT_NAME}}", script_name).replace("{{CONTAINER_NAME}}", base_name)\n'
    '    with open(f"{base_name}.def", "w") as f:\n'
    '        f.write(singularity_content)\n'
    '    \n'
    '    # Build containers\n'
    '    if not args.singularity_only:\n'
    '        print("Building Docker image...")\n'
    '        subprocess.run(["docker", "build", "-t", f"{base_name}:latest", "."], check=True)\n'
    '    \n'
    '    if not args.docker_only:\n'
    '        print("Building Singularity image...")\n'
    '        subprocess.run(["singularity", "build", f"{base_name}.sif", f"{base_name}.def"], check=True)\n'
    '    \n'
    '    print("Build complete!")\n'
    '    \n'
    'if __name__ == "__main__":\n'
    '    main()\n'
    'EOF\n',
    
    'chmod +x %(installdir)s/container_templates/build_containers.py',
]

# Add module help text
modextrapaths = {
    'PATH': 'container_templates',
}

modextravars = {
    'PYTORCH_CONTAINER_TEMPLATES': '%(installdir)s/container_templates',
}

modluafooter = """
help([[
This module provides a PyTorch image processing environment with container generation capabilities.

Available tools:
- build_containers.py: Generate Docker and Singularity containers from Python scripts

Usage examples:
  build_containers.py my_script.py
  build_containers.py my_script.py --docker-only --tag my_analysis
  build_containers.py my_script.py --singularity-only

Environment variables:
- PYTORCH_CONTAINER_TEMPLATES: Path to container templates
]])
"""

moduleclass = 'ai'